import textwrap
from datetime import date

class Transacao:
    def registrar(self, conta):
        pass

class Deposito(Transacao):
    def __init__(self, valor):
        self.valor = valor

    def registrar(self, conta):
        conta.saldo += self.valor
        conta.historico.adicionar_transacao(self)
        return f"Depósito de R$ {self.valor:.2f} realizado com sucesso!"

class Saque(Transacao):
    def __init__(self, valor):
        self.valor = valor

    def registrar(self, conta):
        if conta.saldo >= self.valor:
            conta.saldo -= self.valor
            conta.historico.adicionar_transacao(self)
            return f"Saque de R$ {self.valor:.2f} realizado com sucesso!"
        else:
            return "Saldo insuficiente para saque."

class Historico:
    def __init__(self):
        self.transacoes = []

    def adicionar_transacao(self, transacao):
        self.transacoes.append(transacao)

    def exibir(self):
        extrato = "=== HISTÓRICO DE TRANSAÇÕES ===\n"
        if not self.transacoes:
            extrato += "Não foram realizadas movimentações."
        else:
            for transacao in self.transacoes:
                extrato += f"{type(transacao).__name__}: R$ {transacao.valor:.2f}\n"
        return extrato

class Conta:
    def __init__(self, numero, agencia, cliente):
        self.saldo = 0.0
        self.numero = numero
        self.agencia = agencia
        self.cliente = cliente
        self.historico = Historico()

    @staticmethod
    def nova_conta(cliente, numero):
        return Conta(numero, "0001", cliente)

    def sacar(self, valor):
        saque = Saque(valor)
        return saque.registrar(self)

    def depositar(self, valor):
        deposito = Deposito(valor)
        return deposito.registrar(self)

class ContaCorrente(Conta):
    def __init__(self, numero, agencia, cliente, limite, limite_saques):
        super().__init__(numero, agencia, cliente)
        self.limite = limite
        self.limite_saques = limite_saques
        self.numero_saques = 0

    def sacar(self, valor):
        if self.numero_saques >= self.limite_saques:
            return "Número máximo de saques excedido."
        if valor > self.limite:
            return "Valor do saque excede o limite."
        resultado = super().sacar(valor)
        if "realizado com sucesso" in resultado:
            self.numero_saques += 1
        return resultado

class Cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []

    def realizar_transacao(self, conta, transacao):
        if conta in self.contas:
            return transacao.registrar(conta)
        else:
            return "Conta não pertence ao cliente."

    def adicionar_conta(self, conta):
        self.contas.append(conta)

class PessoaFisica(Cliente):
    def __init__(self, endereco, cpf, nome, data_nascimento):
        super().__init__(endereco)
        self.cpf = cpf
        self.nome = nome
        self.data_nascimento = data_nascimento

def menu():
    menu = """\n
    ================ MENU ================
    [d]\tDepositar
    [s]\tSacar
    [e]\tExtrato
    [nc]\tNova conta
    [lc]\tListar contas
    [nu]\tNovo usuário
    [q]\tSair
    => """
    return input(textwrap.dedent(menu))

def criar_cliente(clientes):
    cpf = input("Informe o CPF (somente número): ")
    if any(cliente.cpf == cpf for cliente in clientes):
        print("\n@@@ Já existe usuário com esse CPF! @@@")
        return

    nome = input("Informe o nome completo: ")
    data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
    endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ")

    cliente = PessoaFisica(endereco, cpf, nome, date.fromisoformat(data_nascimento))
    clientes.append(cliente)
    print("=== Usuário criado com sucesso! ===")

def criar_conta(numero_conta, clientes, contas):
    cpf = input("Informe o CPF do usuário: ")
    cliente = next((cliente for cliente in clientes if cliente.cpf == cpf), None)

    if cliente:
        conta = ContaCorrente(numero_conta, "0001", cliente, limite=500, limite_saques=3)
        cliente.adicionar_conta(conta)
        contas.append(conta)
        print("\n=== Conta criada com sucesso! ===")
    else:
        print("\n@@@ Usuário não encontrado, fluxo de criação de conta encerrado! @@@")


def listar_contas(contas):
    for conta in contas:
        linha = f"""\
            Agência:\t{conta.agencia}
            C/C:\t\t{conta.numero}
            Titular:\t{conta.cliente.nome}
            Saldo:\t\tR$ {conta.saldo:.2f}
        """
        print("=" * 100)
        print(textwrap.dedent(linha))

def depositar(clientes):
    cpf = input("Informe o CPF do usuário: ")
    cliente = next((cliente for cliente in clientes if cliente.cpf == cpf), None)
    if cliente:
        numero_conta = int(input("Informe o número da conta: "))
        valor = float(input("Informe o valor do depósito: "))
        conta = cliente.contas[numero_conta - 1]
        print(cliente.realizar_transacao(conta, Deposito(valor)))
    else:
        print("\n@@@ Usuário não encontrado! @@@")

def sacar(clientes):
    cpf = input("Informe o CPF do usuário: ")
    cliente = next((cliente for cliente in clientes if cliente.cpf == cpf), None)
    if cliente:
        numero_conta = int(input("Informe o número da conta: "))
        valor = float(input("Informe o valor do saque: "))
        conta = cliente.contas[numero_conta - 1]
        print(cliente.realizar_transacao(conta, Saque(valor)))
    else:
        print("\n@@@ Usuário não encontrado! @@@")

def exibir_extrato(clientes):
    cpf = input("Informe o CPF do usuário: ")
    cliente = next((cliente for cliente in clientes if cliente.cpf == cpf), None)
    if cliente:
        numero_conta = int(input("Informe o número da conta: "))
        conta = cliente.contas[numero_conta - 1]
        print(conta.historico.exibir())
    else:
        print("\n@@@ Usuário não encontrado! @@@")

def main():
    clientes = []
    contas = []

    while True:
        opcao = menu()

        if opcao == "d":
            depositar(clientes)

        elif opcao == "s":
            sacar(clientes)

        elif opcao == "e":
            exibir_extrato(clientes)

        elif opcao == "nu":
            criar_cliente(clientes)

        elif opcao == "nc":
            numero_conta = len(contas) + 1
            criar_conta(numero_conta, clientes, contas)

        elif opcao == "lc":
            listar_contas(contas)

        elif opcao == "q":
            break

        else:
            print("\n@@@ Operação inválida, por favor selecione novamente a operação desejada. @@@")


if __name__ == "__main__":
    main()
